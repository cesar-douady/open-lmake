// This file is part of the open-lmake distribution (git@github.com:cesar-douady/open-lmake.git)
// Copyright (c) 2023-2025 Doliam
// This program is free software: you can redistribute/modify under the terms of the GPL-v3 (https://www.gnu.org/licenses/gpl-3.0.html).
// This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

#include "app.hh"

#include "rpc_job.hh"

#include "job_support.hh"
#include "record.hh"

enum class Key : uint8_t { None } ;

enum class Flag : uint8_t {
	Write
,	Regexpr
,	Critical
,	Essential
,	Ignore
,	IgnoreError
,	Incremental
,	NoAllow
,	NoRequired
,	NoWarning
,	Phony
,	ReaddirOk
,	SourceOk
} ;

int main( int argc , char* argv[]) {
	Syntax<Key,Flag> syntax {{
		{ Flag::Write   , { .short_name='W' , .doc="report a write, in addition to flags" } }
	,	{ Flag::Regexpr , { .short_name='X' , .doc="args are regexprs"                    } }
	//
	,	{ Flag::Essential   , { .short_name=TflagChars     [+Tflag     ::Essential  ].second , .doc="show when generating user oriented graphs"                              } }
	,	{ Flag::Incremental , { .short_name=TflagChars     [+Tflag     ::Incremental].second , .doc="do not rm file before job execution"                                    } }
	,	{ Flag::NoWarning   , { .short_name=TflagChars     [+Tflag     ::NoWarning  ].second , .doc="do not warn user if uniquified or rm'ed while generated by another job" } }
	,	{ Flag::Phony       , { .short_name=TflagChars     [+Tflag     ::Phony      ].second , .doc="accept that target is not physically generated on disk"                 } }
	,	{ Flag::Ignore      , { .short_name=ExtraTflagChars[+ExtraTflag::Ignore     ].second , .doc="ignore writes"                                                          } }
	,	{ Flag::NoAllow     , { .short_name=ExtraTflagChars[+ExtraTflag::Allow      ].second , .doc="do not force target to be accepted, just inform writing to it"          } }
	,	{ Flag::SourceOk    , { .short_name=ExtraTflagChars[+ExtraTflag::SourceOk   ].second , .doc="accept if target is actually a source"                                  } }
	,	{ Flag::Critical    , { .short_name=DflagChars     [+Dflag     ::Critical   ].second , .doc="report critical deps"                                                   } }
	,	{ Flag::IgnoreError , { .short_name=DflagChars     [+Dflag     ::IgnoreError].second , .doc="ignore if deps are in error"                                            } }
	,	{ Flag::NoRequired  , { .short_name=DflagChars     [+Dflag     ::Required   ].second , .doc="ignore if deps cannot be built"                                         } }
	,	{ Flag::ReaddirOk   , { .short_name=ExtraDflagChars[+ExtraDflag::ReaddirOk  ].second , .doc="allow readdir"                                                          } }
	}} ;
	CmdLine<Key,Flag> cmd_line { syntax,argc,argv } ;
	//
	if (!cmd_line.args) return 0 ;                                                                         // fast path : declare no targets
	for( ::string const& f : cmd_line.args ) if (!f) syntax.usage("cannot declare empty file as target") ;
	//
	AccessDigest ad ;
	//
	if ( cmd_line.flags[Flag::Write      ]) ad.write               =  Yes                     ;
	//
	if ( cmd_line.flags[Flag::Essential  ]) ad.flags.tflags       |=  Tflag     ::Essential   ;
	if ( cmd_line.flags[Flag::Incremental]) ad.flags.tflags       |=  Tflag     ::Incremental ;
	if ( cmd_line.flags[Flag::NoWarning  ]) ad.flags.tflags       |=  Tflag     ::NoWarning   ;
	if ( cmd_line.flags[Flag::Phony      ]) ad.flags.tflags       |=  Tflag     ::Phony       ;
	if ( cmd_line.flags[Flag::Ignore     ]) ad.flags.extra_tflags |=  ExtraTflag::Ignore      ;
	if (!cmd_line.flags[Flag::NoAllow    ]) ad.flags.extra_tflags |=  ExtraTflag::Allow       ;
	if ( cmd_line.flags[Flag::SourceOk   ]) ad.flags.extra_tflags |=  ExtraTflag::SourceOk    ;
	if ( cmd_line.flags[Flag::Critical   ]) ad.flags.dflags       |=  Dflag     ::Critical    ;
	if ( cmd_line.flags[Flag::IgnoreError]) ad.flags.dflags       |=  Dflag     ::IgnoreError ;
	if ( cmd_line.flags[Flag::NoRequired ]) ad.flags.dflags       &= ~Dflag     ::Required    ;
	if ( cmd_line.flags[Flag::ReaddirOk  ]) ad.flags.extra_dflags |=  ExtraDflag::ReaddirOk   ;
	//
	try                       { JobSupport::target( {New,Yes/*enabled*/} , ::move(cmd_line.args) , ad , cmd_line.flags[Flag::Regexpr] ) ; }
	catch (::string const& e) { exit(Rc::Usage,e) ;                                                                                       }
	//
	return 0 ;
}
