Comment(
	This file is part of the open-lmake distribution (git@github.com:cesar-douady/open-lmake.git)
	Copyright (c) 2023-2025 Doliam
	This program is free software: you can redistribute/modify under the terms of the GPL-v3 (https://www.gnu.org/licenses/gpl-3.0.html).
	This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
)

Title(lautodep,mimic OpenLmake job prelude)

.SH SYNOPSYS
B(lautodep) [I(OPTION)]... I(cmd) I(args)...

.SH DESCRIPTION
.LP
B(lautodep) is used by B(ldebug) to launch jobs in an adequate environment.
It may also be useful when designing a flow to try various options.
It allows to see what information (deps and targets) are recorded by code instrumentation OpenLmake injects in jobs to track activity without actually run a job under its control.
.LP
The trace generated by B(lautodep) is halfly digested in the sens that :
Bullet
Only a summary of pertinent accesses are provided, unlike C(strace) that can generate a line for each access.
There is a line for each accessed file, which may be a read or nothing, possibly followed by a write or an unlink.
Bullet
Accesses are tracked as for OpenLmake, i.e. files outside the repo are not tracked, except read accesses in a source dir.
Bullet
When symbolic links are supported, they are resolved according to the required support level and additional deps may be generated when needed for OpenLmake to work properly.
Bullet
It is not fully digested as dep/target flags that are provided in rules are not taken into account.
A full digestion to mimic OpenLmake would require a whole lot of information that would make the user interface significantly heavier, defeating the usefulness of this tool.
.LP
Accesses are split into 2 categories :
Bullet Targets : a prefix mentions the type of target, unlink versus write, preceded by a read or not.
Bullet Deps    : a kind of ascii art render parallel accesses.

.SH OPTIONS

Item(B(-a),B(--auto-mkdir))
Mimic setting the rule attribute B(auto_mkdir)=I(True).

Item(B(-c) I(abs_dir),B(--chroot-dir)=I(abs_dir))
Mimic setting the rule attribute B(chroot_dir)=I(abs_dir).

Item(B(-d) I(dir),B(--cwd)=I(dir))
Mimic setting the rule attribute B(cwd)=I(dir).

Item(B(-e) I(list),B(--env)=I(list))
I(list) must be provided as a  tuple or list of str using the python syntax (which most probably requires shell quoting).
Listed variables are kept from the environment.

Item(B(-k),B(--keep-tmp))
Dont erase tmp dir after execution.

Item(B(-l) I(key),B(--link-support)=I(key))
Mimic setting the config attribute B(link_support)=I(key).

Item(B(-m) I(key),B(--autodep-method)=I(key))
Mimic setting the rule attribute B(autodep)=I(key).

Item(B(-o) I(file),B(--out)=I(file))
Write access info (deps and targets) to I(file).

Item(B(-s) I(list),B(--source-dirs)=I(list))
I(list) must be provided as a  tuple or list of str using the python syntax (which most probably requires shell quoting).
Mimic setting the rule attribute B(source_dirs)=I(list).

Item(B(-t) I(abs_dir),B(--tmp-dir)=I(abs_dir))
This option is compulsery.
Set the physical tmp dir.
The tmp dir is cleaned (i.e. all files inside it are B(rm)'ed) before execution.
It is also cleaned after execution unless the B(--keep-tmp) or B(-k) is given.

Item(B(-L) I(abs_dir),B(--lmake-view)=I(abs_dir))
Mimic setting the rule attribute B(lmake_view)=I(abs_dir).

Item(B(-R) I(abs_dir),B(--repo-view)=I(abs_dir))
Mimic setting the rule attribute B(repo_view)=I(abs_dir).

Item(B(-T) I(abs_dir),B(--tmp-view)=I(abs_dir))
Mimic setting the rule attribute B(tmp_view)=I(abs_dir).

Item(B(-V) I(dict),B(--views)=I(dict))
I(dict) must be provided as a dict mapping str to view descriptions using the python syntax (which most probably requires shell quoting).
Mimic setting the rule attribute B(views)=I(dict).

.SH FILES
CommonFiles

Footer
