#!/bin/bash -ex

# This file is part of the open-lmake distribution (git@github.com:cesar-douady/open-lmake.git)
# Copyright (c) 2023-2025 Doliam
# This program is free software: you can redistribute/modify under the terms of the GPL-v3 (https://www.gnu.org/licenses/gpl-3.0.html).
# This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

MK_FILE=$( realpath ${1:-/dev/null})
H_FILE=$(  realpath ${2:-/dev/null})
SUM_FILE=$(realpath ${3:-/dev/null})
ERR_FILE=$(realpath ${4:-/dev/null})

trial_dir=${MK_FILE%.*}.trial

source /etc/os-release # define ID and VERSION_ID

echo SYS_CONFIG_OK := 0 >$MK_FILE  # this will be overwritten at the end, when auto-config has gone through
                        >$H_FILE   # useless, for sanity only
                        >$SUM_FILE # empty file as from now on, we append to it
                        >$ERR_FILE # .

ok() {
	if $@ >/dev/null ; then echo 1
	else                    echo 0
	fi
}

unset CDPATH # ensure cd goes to the right directory and writes nothing to stdout

PATH="$(realpath $(dirname $0)):$PATH" # access to local exe's

mkdir -p $trial_dir
rm -rf   $trial_dir/*
cd       $trial_dir

#
# CXX configuration
#

CXX=${CXX:-g++}

case "$(basename $CXX)" in
	*++*  ) ;;
	cc*   ) echo "\$CXX=$CXX must be a native C++ one, such as c++${CXX#cc}"                                     >>$ERR_FILE ; exit 1 ;;
	clang*) echo "\$CXX=$CXX must be a native C++ one, such as clang++${CXX#clang}"                              >>$ERR_FILE ; exit 1 ;;
	gcc*  ) echo "\$CXX=$CXX must be a native C++ one, such as g++${CXX#gcc}"                                    >>$ERR_FILE ; exit 1 ;;
	*     ) echo "\$CXX=$CXX cannot be recognized as a c++ compiler, please use one such as g++, clang++ or c++" >>$ERR_FILE ; exit 1 ;;
esac

CXX=$(type -p $CXX)
[ "$CXX" ] || { echo $CXX not found >>$ERR_FILE ; exit 1 ; }
CXX_DIR=$(dirname $CXX)

cc() { PATH=$CXX_DIR:$PATH $CXX "$@" ; }

case $(cc --version | head -1) in
	*clang*) CXX_FLAVOR=clang ;;
	*      ) CXX_FLAVOR=gcc   ;; # there is no easy marker that can be recognized for gcc
esac

CXX_VERSION=$(cc -dumpversion)                                                                               # outputs either major version or full version, depending on flavors and versions
CXX_VERSION=${CXX_VERSION%%.*}                                                                               # strip minor if present
[ "$CXX_VERSION" ] || { echo cannot determine version of $CXX "($CXX_FLAVOR style)" >>$ERR_FILE ; exit 1 ; }
case $CXX_FLAVOR in
	clang) [[ $CXX_VERSION -ge 14 ]] || { echo $CXX version $CXX_VERSION must be at least 14 >>$ERR_FILE ; exit 1 ; } ;;
	gcc  ) [[ $CXX_VERSION -ge 11 ]] || { echo $CXX version $CXX_VERSION must be at least 11 >>$ERR_FILE ; exit 1 ; } ;;
esac

if   cc -o /dev/null -xc++ -std=c++23 - <<< 'int main() {}' ; then CXX_STD=c++23
elif cc -o /dev/null -xc++ -std=c++20 - <<< 'int main() {}' ; then CXX_STD=c++20
else
	echo $CXX must support at least c++20 >>$ERR_FILE ; exit 1
fi

echo "using $CXX as $CXX_STD compiler (version $CXX_VERSION)" >>$SUM_FILE

#
# Python configuration (Python2 is optional)
#

config_python() {
	python=$1
	ver=$2
	python=${python:-python$ver}
	p=$(type -p $python || :)
	[ "$p" ] || { msg="$python not found" ; return 1 ; }
	python=$p
	llp=$LD_LIBRARY_PATH                                                                                                                   # save LD_LIBARY_PATH
	export LD_LIBRARY_PATH="$(dirname $(dirname $python))/lib:$LD_LIBRARY_PATH"
	py_major=$($python -c 'import sys       ; print(sys.version_info.major                )')
	py_minor=$($python -c 'import sys       ; print(sys.version_info.minor                )')
	inc_dir=$( $python -c 'import sysconfig ; print(sysconfig.get_config_var("INCLUDEDIR"))')
	inc_py=$(  $python -c 'import sysconfig ; print(sysconfig.get_config_var("INCLUDEPY" ))')
	lib_base=$($python -c 'import sysconfig ; print(sysconfig.get_config_var("LDLIBRARY" ))')
	lib_dir=$( $python -c 'import sysconfig ; print(sysconfig.get_config_var("LIBDIR"    ))')
	case $ver in
		2)	[ $py_major -eq 2 ] || { msg="$python version must be 2.x"          ; return 1 ; }
			[ $py_minor -ge 7 ] || { msg="$python version must be at least 2.7" ; return 1 ; }
		;;
		3)	[ $py_major -eq 3 ] || { msg="$python version must be 3.x"          ; return 1 ; }
			[ $py_minor -ge 6 ] || { msg="$python version must be at least 3.6" ; return 1 ; }
		;;
	esac
	case $lib_base in
		*.so | *.a ) ;;
		*          ) msg="$python library $lib_base is not a python library" ; return 1 ;;
	esac
	case $lib_dir/ in
		/usr/lib/*  ) lib_dir= ;;
		/usr/lib64/*) lib_dir= ;;
	esac
	[ ! "$lib_dir" ] || lib_opt=-L$lib_dir
	cat <<-"EOF" >probe_python$ver.c
		#include <Python.h>
		int main() {
			PyObject* none = Py_None ;
		}
	EOF
	cc -o /dev/null -I$inc_py $lib_opt -xc probe_python$ver.c -l:$lib_base || { msg="$python is unusable as python library" ; return 1 ; } # check if Py_None is available in lib
	eval "PYTHON${ver#3}=$python"
	eval "PY${ver}_INCLUDEDIR=$inc_dir"
	eval "PY${ver}_INCLUDEPY=$inc_py"
	eval "PY${ver}_LIB_BASE=$lib_base"
	eval "PY${ver}_LIB_DIR=$lib_dir"
	case "$lib_base" in
		*.so) eval "HAS_PY${ver}_DYN=1" ; echo "using $python as python$ver (version $py_major.$py_minor)"                                           >>$SUM_FILE ;;
		*.a ) eval "HAS_PY${ver}_DYN=0" ; echo "using $python as python$ver (version $py_major.$py_minor) with static library (minimal job support)" >>$SUM_FILE ;;
	esac
	LD_LIBRARY_PATH=$llp                                                                                                                   # restore LD_LIBARY_PATH
}
#
config_python "$PYTHON2" 2 || { echo "no python2 support ($msg)" >>$SUM_FILE ; PYTHON2= ; }                                                # python2 is optional
config_python "$PYTHON"  3 || { echo                      $msg   >>$ERR_FILE ; exit 1   ; }                                                # python3 is compulsery
#
if   [ "$PY2_LIB_DIR" -a "$PY3_LIB_DIR" ] ; then PY_LD_LIBRARY_PATH=$PY3_LIB_DIR:$PY2_LIB_DIR
elif [ "$PY2_LIB_DIR"                   ] ; then PY_LD_LIBRARY_PATH=$PY2_LIB_DIR
elif [ "$PY3_LIB_DIR"                   ] ; then PY_LD_LIBRARY_PATH=$PY3_LIB_DIR
fi

#
# ADDR2LINE (ADDR2LINE+HAS_ADDR2LINE)
#
case $CXX_FLAVOR in
	gcc  ) ADDR2LINE=$CXX_DIR/addr2line      ;;
	clang) ADDR2LINE=$CXX_DIR/llvm-addr2line ;;
esac
[ -x "$ADDR2LINE" ] || ADDR2LINE=$(type -p addr2line ||:)
#
HAS_ADDR2LINE=$(ok test "$ADDR2LINE")

#
# CLOSE_RANGE (HAS_CLOSE_RANGE)
# test whether we can include linux/close_range.h
#
HAS_CLOSE_RANGE=$(ok cc -E --include 'linux/close_range.h' -o /dev/null -xc /dev/null )

#
#
# INC_DIRS (STD_INC_DIRS)
#
cc -v -E -o /dev/null -xc++ -std=$CXX_STD - </dev/null 2>compiler_info
# get only first word of each inclue dir as there may be info following it
STD_INC_DIRS="$(echo $(realpath $(sed -e '1,/<.*>.*search starts/d' -e '/End of search/,$d' -e 's/ *\([^ ]*\).*/\1/' compiler_info)) )" # echo is used to replace \n by space

# EXPERIMENTAL_LIBRARY (NEED_EXPERIMENTAL_LIBRARY) - must be after INC_DIRS
#
cat <<"EOF" >experimental_library.cc
	#include <stop_token>
	std::stop_token st ;
EOF
if   cc -c -o /dev/null -std=$CXX_STD                        experimental_library.cc ; then NEED_EXPERIMENTAL_LIBRARY=0
elif cc -c -o /dev/null -std=$CXX_STD -fexperimental-library experimental_library.cc ; then NEED_EXPERIMENTAL_LIBRARY=1
else
	echo "$CXX does not implement $CXX_STD" >>$ERR_FILE
	exit 1
fi

#
# LD_AUDIT (HAS_LD_AUDIT)
#
case $ID/$VERSION_ID in
	ubuntu/20.04) HAS_LD_AUDIT=0 ;;                      # Ubuntu  fix : Ubuntu 20.04 seems to miss calling auditing code upon ldopen
	centos/7    ) HAS_LD_AUDIT=0 ;;                      # CentOS7 fix : This is what would answer a real centos-7 system, but we may be running in a docker which has a more recent kernel.
	*           )
		cat <<-"EOF" >audited.c
			#include <stdio.h>
			int main() { printf("0") ; }
		EOF
		cat <<-"EOF" >ld_audit.c
			#include <stdio.h>
			#include <stdlib.h>
			unsigned int la_version(unsigned int) { printf("1") ; exit(0) ; }
		EOF
		cc -o audited                   -xc audited.c
		cc -o ld_audit.so -shared -fPIC -xc ld_audit.c
		HAS_LD_AUDIT=$(LD_AUDIT=./ld_audit.so ./audited) # check if auditing code is executed
	;;
esac
[ $HAS_LD_AUDIT = 1 ] || echo no LD_AUDIT support >>$SUM_FILE

#
# LD_LIBRARY_PATH (STD_LIBRARY_PATH+STD_LIBRARY_PATH_32+LINK_LIB_PATH+LINK_LIB_PATH32)
#
show_std_library_path() {
	strace -E LD_PRELOAD='magic1234.so' -E LD_LIBRARY_PATH= $1 2>&1 | awk '/\/magic1234.so/ {sub(/[^"]*"/,"") ; sub(/\/magic1234.so.*/,"") ; printf("%s%s",sep,$0) ; sep=":" }'
}
cc      -o std_library_path    -xc++ - <<< 'int main(){}' && STD_LIBRARY_PATH=$(   show_std_library_path ./std_library_path   )
cc -m32 -o std_library_path_32 -xc++ - <<< 'int main(){}' && STD_LIBRARY_PATH_32=$(show_std_library_path ./std_library_path_32)
#
LINK_LIB_PATH=$(find_cc_ld_library_path $CXX)
LINK_LIB_PATH=${LINK_LIB_PATH//:/ }
if [ $HAS_32 = 1 ] ; then
	LINK_LIB_PATH_32=$(find_cc_ld_library_path -m32 $CXX)
	LINK_LIB_PATH_32=${LINK_LIB_PATH_32//:/ }
fi

#
# LD_SO (HAS_32+LD_SO_LIB+LD_SO_LIB32)
#
show_lib() {
	strace -E LD_PRELOAD='/>>>$LIB<<<' $1 2>&1 | awk '/>>>.*<<</ { sub(/.*>>>/,"") ; sub(/<<<.*/,"") ; print ; exit }'
}
cc      -o ld_so_lib    -xc++ - <<< 'int main(){}' && LD_SO_LIB=$(   show_lib ./ld_so_lib   )
cc -m32 -o ld_so_lib_32 -xc++ - <<< 'int main(){}' && LD_SO_LIB_32=$(show_lib ./ld_so_lib_32)
if [ "$LD_SO_LIB" -a "$LD_SO_LIB_32" -a "$LD_SO_LIB" != "$LD_SO_LIB_32" ] ; then
	HAS_32=1                                                                     # we have both 32 and 64 bits, use the ld.so $LIB feature
else
	[ "$LD_SO_LIB_32" ] || echo no 32 bits support >>$SUM_FILE                   # else we are running on a 32 bits system
	HAS_32=0                                                                     # ensure we do not the ld.so $LIB feature
	LD_SO_LIB=lib                                                                # if auto-detect failed, dont support 32-bits and take a standard value for LD_SO_LIB
	LD_SO_LIB_32=                                                                # .
fi

#
# LIBC (USE_LIBC_START_MAIN)
#
cat <<"EOF" >start_main.c
	#include <unistd.h>
	int __libc_start_main( void* main , int argc , void* argv , void* auxvec , void* init , void* fini , void* rtld_fini , void* stack_end) {
		write(1,"1",1) ; // stick to very basic sycalls as nothing is initialized yet
		_exit(0) ;       // dont call main
	}
	int main() { write(1,"0",1) ; }
EOF
cc -o start_main -xc start_main.c
USE_LIBC_START_MAIN=$(./start_main) # check if _libc_start_main is executed

#
# MAX_PID
#
MAX_PID=$(cat /proc/sys/kernel/pid_max || echo 0)

#
# MEMFD (HAS_MEMFD)
#
cat <<"EOF" >memfd.c
	#ifndef _GNU_SOURCE
		#define _GNU_SOURCE
	#endif
	#include <sys/mman.h>
	int main() { memfd_create("trial",0) ; }
EOF
HAS_MEMFD=$(ok cc -o /dev/null -xc memfd.c) # check if memfd_create is available in lib

#
# OBJCOPY
#
case $CXX_FLAVOR in
	gcc  ) OBJCOPY=$CXX_DIR/objcopy      ;;
	clang) OBJCOPY=$CXX_DIR/llvm-objcopy ;;
esac
[ -x "$OBJCOPY" ] || OBJCOPY=$(type -p objcopy ||:)

#
# OS (OS_ID)
#
OS_ID="$ID-$VERSION_ID"

#
# PATH (STD_PATH)
#
STD_PATH=$(env -i /bin/bash -c 'echo $PATH')

#
# PCRE (HAS_PCRE)
#
cat <<"EOF" >pcre.cc
	#define PCRE2_CODE_UNIT_WIDTH 8
	#include <pcre2.h>
	int main() {
		pcre2_compile(nullptr,0,PCRE2_ANCHORED|PCRE2_DOTALL|PCRE2_ENDANCHORED,nullptr,nullptr,nullptr) ;
	}
EOF
HAS_PCRE=$(ok cc -std=$CXX_STD -o /dev/null pcre.cc -lpcre2-8 ) # check if pcre2_compile is available in lib
#
[ $HAS_PCRE = 1 ] || echo "no pcre2 support, fall back to (slower) c++ STL regular expression library" >>$SUM_FILE

#
# PTRACE (MUST_UNDEF_PTRACE_MACROS+HAS_PTRACE_GET_SYSCALL_INFO)
#
cat <<-"EOF" >undef_ptrace_macros.c
	#include <sys/ptrace.h>
	#include <linux/ptrace.h>
	#undef PTRACE_TRACEME
	int main() {
		long rx = ptrace(PTRACE_TRACEME,0,0,0) ;
	}
EOF
MUST_UNDEF_PTRACE_MACROS=$(ok cc -c -idirafter /usr/include/linux -o /dev/null -xc undef_ptrace_macros.c )
#
cat <<-"EOF" >get_syscall_info.c
	#include <sys/ptrace.h>
	#include <linux/ptrace.h>
	#if MUST_UNDEF_PTRACE_MACROS
		#undef PTRACE_GET_SYSCALL_INFO
	#endif
	int main() {
		long rx = ptrace(PTRACE_GET_SYSCALL_INFO,0,0,0) ;
	}
EOF
	HAS_PTRACE_GET_SYSCALL_INFO=$(ok cc -c -idirafter /usr/include/linux -DMUST_UNDEF_PTRACE_MACROS=$MUST_UNDEF_PTRACE_MACROS -o /dev/null -xc get_syscall_info.c )

#
# SECCOMP (HAS_SECCOMP)
# test whether we have seccomp : warning, include <seccomp.h> is not enough to test, check its content too
#
cat <<"EOF" >seccomp.c
	#include <seccomp.h>
	struct scmp_version v ;
	int main() {
		scmp_filter_ctx ctx ;
		seccomp_syscall_priority(ctx,0,0) ;
	}
EOF
# usually seccomp.h is in /usr/include (with an internal file /usr/include/linux/seccomp.h) but some systems have seccomp.h directly installed in /usr/include/linux
HAS_SECCOMP=$(ok cc -idirafter /usr/include/linux -o /dev/null -xc seccomp.c -l:libseccomp.so.2 ) # check if seccomp_syscall_priority is available in lib
#
[ $HAS_SECCOMP = 1 ] || echo "no seccomp support, fall back to (slower when autodep=ptrace) ptrace to trace jobs" >>$SUM_FILE

#
# SGE (HAS_SGE)
#
HAS_SGE=$(ok type -p qsub)
#
[ $HAS_SGE = 1 ] || echo no sge support >>$SUM_FILE

#
# SLURM (HAS_SLURM+SLURM_INC_DIR+SLURM_SO)
#
if [ "$SLURM_ROOT" ] ; then
	SLURM_INC_DIR=$SLURM_ROOT/include
	SLURM_SO="$(find $SLURM_ROOT -name lib32 -prune -o -name libslurm.so || :)" # exclude 32 bits in case of ...
	SLURM_SO=${SLURM_SO% *}                                                     # only select first if there is ambiguity
fi
[ "$SLURM_ROOT" ] || SLURM_SO=libslurm.so
HAS_SLURM=$(ok cc -E ${SLURM_INC_DIR:+-isystem $SLURM_INC_DIR} --include slurm/slurm.h -xc /dev/null )
#
[ $HAS_SLURM = 1 ] || echo no slurm support >>$SUM_FILE

#
# STACK (HAS_STACKTRACE+HAS_STACKTRACE_32+LIB_STACKTRACE+LIB_STACKTACE_32+STACK_GROWS_DOWNWARD)
#
cat <<"EOF" >stacktrace.cc
	#include <stacktrace>
	using namespace std ;
	int main() {                                    // mimic a mini-program using stack trace
		::stacktrace st = ::stacktrace::current() ;
		int          rc = 0                       ;
		for( ::stacktrace_entry const& e : st ) rc += e.source_line() ;
		return rc ;
	}
EOF
if   cc -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++_libbacktrace ; then LIB_STACKTRACE=stdc++_libbacktrace         # compile and link, to ensure both steps are ok (check if available in lib)
elif cc -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++exp           ; then LIB_STACKTRACE=stdc++exp                   # .
fi
if   cc -m32 -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++_libbacktrace ; then LIB_STACKTRACE_32=stdc++_libbacktrace # .
elif cc -m32 -std=$CXX_STD -o /dev/null stacktrace.cc -lstdc++exp           ; then LIB_STACKTRACE_32=stdc++exp           # .
fi
#
HAS_STACKTRACE=$((   ${LIB_STACKTRACE:+   1}))
HAS_STACKTRACE_32=$((${LIB_STACKTRACE_32:+1}))
#
[ $HAS_STACKTRACE = 1 ] || echo "no stacktrace support, fall back to (lower quality back trace in case of crash) addr2line" >>$SUM_FILE
#
cat <<"EOF" >stack_dir.c
	#include <stdint.h>
	#include <stdio.h>
	uintptr_t sub() {
		int x ;
		return uintptr_t(&x) ;
	}
	int main() {
		int x ;
		printf("%d\n",uintptr_t(&x)>=sub()) ;
	}
EOF
cc -o stack_dir stack_dir.c
STACK_GROWS_DOWNWARD=$(./stack_dir)

#
# SPLIT_DBG (SPLIT_DBG+SPLIT_DBG_32) - must follow STACKTRACE
#
if [ "$OBJCOPY" ] ; then
	SPLIT_DBG=$((   !$HAS_STACKTRACE   ))
	SPLIT_DBG_32=$((!$HAS_STACKTRACE_32))
fi

#
# UNREACHABLE (HAS_UNREACHABLE)
#
cat <<"EOF" >unreachable.cc
	#include <utility>
	int main() {
		std::unreachable() ;
	}
EOF
HAS_UNREACHABLE=$(ok cc -std=$CXX_STD -o /dev/null unreachable.cc) # check if std::unreachable is available in lib

#
# ZLIB (HAS_ZLIB)
#
cat <<"EOF" >zlib.cc
	#include <zlib.h>
	int main() {
		z_stream zs ;
		deflate(&zs,0) ;
	}
EOF
HAS_ZLIB=$(ok cc -std=$CXX_STD -o /dev/null zlib.cc -lz ) # check both include and lib

cat >$MK_FILE <<-EOF
	SYS_CONFIG_OK := 1
	LMAKE_FLAGS   := $LMAKE_FLAGS
	#
	BASH                      := /bin/bash
	CXX                       := $CXX
	CXX_DIR                   := $CXX_DIR
	CXX_FLAVOR                := $CXX_FLAVOR
	CXX_STD                   := $CXX_STD
	GIT                       := $(type -p git)
	HAS_32                    := ${HAS_32#0}
	HAS_LD_AUDIT              := ${HAS_LD_AUDIT#0}
	HAS_PCRE                  := ${HAS_PCRE#0}
	HAS_PY2_DYN               := ${HAS_PY2_DYN#0}
	HAS_PY3_DYN               := ${HAS_PY3_DYN#0}
	HAS_SECCOMP               := ${HAS_SECCOMP#0}
	HAS_SGE                   := ${HAS_SGE#0}
	HAS_SLURM                 := ${HAS_SLURM#0}
	HAS_ZLIB                  := ${HAS_ZLIB#0}
	LD_SO_LIB                 := $LD_SO_LIB
	LD_SO_LIB_32              := $LD_SO_LIB_32
	LIB_STACKTRACE            := $LIB_STACKTRACE
	LIB_STACKTRACE_32         := $LIB_STACKTRACE_32
	LINK_LIB_PATH             := $LINK_LIB_PATH
	LINK_LIB_PATH_32          := $LINK_LIB_PATH_32
	NEED_EXPERIMENTAL_LIBRARY := ${NEED_EXPERIMENTAL_LIBRARY#0}
	OBJCOPY                   := $OBJCOPY
	PY2_INCLUDEDIR            := $PY2_INCLUDEDIR
	PY2_INCLUDEPY             := $PY2_INCLUDEPY
	PY2_LIB_BASE              := $PY2_LIB_BASE
	PY2_LIB_DIR               := $PY2_LIB_DIR
	PY3_INCLUDEDIR            := $PY3_INCLUDEDIR
	PY3_INCLUDEPY             := $PY3_INCLUDEPY
	PY3_LIB_BASE              := $PY3_LIB_BASE
	PY3_LIB_DIR               := $PY3_LIB_DIR
	PY_LD_LIBRARY_PATH        := $PY_LD_LIBRARY_PATH
	PYTHON                    := $PYTHON
	PYTHON2                   := $PYTHON2
	SLURM_INC_DIR             := $SLURM_INC_DIR
	SPLIT_DBG                 := ${SPLIT_DBG#0}
	SPLIT_DBG_32              := ${SPLIT_DBG_32#0}
	STD_INC_DIRS              := $STD_INC_DIRS
	STD_PATH                  := $STD_PATH
EOF

if [ "$LD_SO_LIB_32" ] ; then
	case $HAS_STACKTRACE$HAS_STACKTRACE_32 in
		00) HAS_STACKTRACE_CUR=0                           >>$H_FILE ;;
		01) HAS_STACKTRACE_CUR='(__i386__||__arm__)'       >>$H_FILE ;;
		10) HAS_STACKTRACE_CUR='(__x86_64__||__aarch64__)' >>$H_FILE ;;
		11) HAS_STACKTRACE_CUR=1                           >>$H_FILE ;;
	esac
else
	HAS_STACKTRACE_CUR=$HAS_STACKTRACE
fi
cat >$H_FILE <<-EOF
	#pragma once
	//
	#define ADDR2LINE                   "$ADDR2LINE"
	#define HAS_32                      $HAS_32
	#define HAS_ADDR2LINE               $HAS_ADDR2LINE
	#define HAS_CLOSE_RANGE             $HAS_CLOSE_RANGE
	#define HAS_LD_AUDIT                $HAS_LD_AUDIT
	#define HAS_MEMFD                   $HAS_MEMFD
	#define HAS_PCRE                    $HAS_PCRE
	#define HAS_PTRACE_GET_SYSCALL_INFO $HAS_PTRACE_GET_SYSCALL_INFO
	#define HAS_SECCOMP                 $HAS_SECCOMP
	#define HAS_SGE                     $HAS_SGE
	#define HAS_SLURM                   $HAS_SLURM
	#define HAS_STACKTRACE              $HAS_STACKTRACE_CUR
	#define HAS_UNREACHABLE             $HAS_UNREACHABLE
	#define HAS_ZLIB                    $HAS_ZLIB
	#define LD_SO_LIB                   "$LD_SO_LIB"
	#define LD_SO_LIB_32                "$LD_SO_LIB_32"
	#define MAX_PID                     $MAX_PID
	#define MUST_UNDEF_PTRACE_MACROS    $MUST_UNDEF_PTRACE_MACROS
	#define OS_ID                       "$OS_ID"
	#define PY_LD_LIBRARY_PATH          "$PY_LD_LIBRARY_PATH"
	#define PYTHON                      "$PYTHON"
	#define SLURM_SO                    "$SLURM_SO"
	#define STACK_GROWS_DOWNWARD        $STACK_GROWS_DOWNWARD
	#define STD_LIBRARY_PATH            "$STD_LIBRARY_PATH"
	#define STD_LIBRARY_PATH_32         "$STD_LIBRARY_PATH_32"
	#define STD_PATH                    "$STD_PATH"
	#define USE_LIBC_START_MAIN         $USE_LIBC_START_MAIN
EOF
