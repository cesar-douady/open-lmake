* This file is part of the open-lmake distribution (git@github.com:cesar-douady/open-lmake.git)
* Copyright (c) 2023-2025 Doliam
* This program is free software: you can redistribute/modify under the terms of the GPL-v3 (https://www.gnu.org/licenses/gpl-3.0.html).
* This program is distributed WITHOUT ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

items (also used in XXX comments) :
	* normal    : ordered by implementation priority in each section
	! difficult : unclear how to implement it
	? idea      : unclear that it is desirable
	> delayed   : to be implemented later (cannot be implemented today)
	M museum    : most probably obsolete, kept in museum dir as long as not 100% sure
	X abandoned

****************************************************************************************************
* BUGS (implemented but does not work)
****************************************************************************************************

* .so accessed with LD_LIBRARY_PATH are not seen with ld_preload
	- in basics.py, add LD_LIBRARY_PATH=toto
	- toto/xxx.so are accessed (and visible with ld_audit), but are not seen with ld_preload (while they should)
? exceptionnally, server blocks
	- seems to be while taking GIL

****************************************************************************************************
* LACK (not implemented but necessary for lmake semantic)
****************************************************************************************************

! generate meaningful messages in case of I/O error such as disk full
! manage 32 bits executables with ptrace
? add quarantined files in summary
? provide a protection mechanism to ensure jobs are not cached if they used absolute paths
	- record usage of getcwd() and accesses to /proc/xxx/cwd
	- emit a "dont cache" message
	- unless repo_view is used
	- provide a warning to user if the case arises
? before erasing a dir, check for phony targets, not only files on disk
	- then dir markers for gcc include dirs could be phony, which is more elegant
? improve hard link management
	- when ln a b
	- followed by write to b
	- consider it is a write to a

****************************************************************************************************
* COSMETIC (ugly as long as not implemented)
****************************************************************************************************

! add a warning when ids reach 15/16 of their limits
	- hard to do in a nice, informative and homogeneous way
? generate an error when calling depend on a target
	- either known at that time
	- or when it becomes a target if later
? consider a package for option passing
	? gnu argp
	? http://nongnu.askapache.com/argpbook/step-by-step-into-argp.pdf
? if actual_job!=conform_job, show both with warning in lshow
? report resources even when job spawn process groups
	- dont know how to do that
X gather stdout/stderr from running job_exec when lshow -o/-e
	- too complex for too low an added value
	- lshow -o can be obtained by doing lmake -o, lshow -e is of lesser importance

****************************************************************************************************
* ROBUSTNESS & MAINTENABILITY (fragile/difficult to read or maintain as long as not implemented)
****************************************************************************************************

* use : https://github.com/ZXShady/enchantum
	- much cleaner than the ugly ENUM macro
! fix incompatibilities between sanitize (LMAKE_FLAGS=ST or SA) and autodep in jobs
! isolate signal-safe functions in dedicated .o
	- and check such .o do not call malloc with nm
	- or write such functions in C, so that malloc are necessary visible
? use a Path struct instead of at/file
	- everywhere applicable
	- possibly too expensive performance wise
? if a job cannot connect to job_exec to report deps
	- note fact in a marker file
		- exit with error is not enough as it could be hidden by the job itself if in a sub-process
	- check marker file existence in job_exec
		- and retry job in that case rather than generating job in error

****************************************************************************************************
* FEATURES (not implemented and can work without)
****************************************************************************************************

* support regexprs in lmake.depend/lmake.target (and ldepend/ltarget)
	- just pass a regexpr (result of re.compile()) for lmake.depend/target (and a --regexpr for ldepend/ltarget)
	- dont support read/verbose/follow_symlinks for lmake.depend/ldepend nor write for lmake.target/ltarget
	- implement a matching dict with dates to apply only to future deps/targets
	- add an ExtraDflag/ExtraTflag to signal regexprs
* implement cache_repair
	- clean LMAKE/reserved
	- recompute overall size
	- recompute all lru files
* implement cache v2 :
	- use a daemon
? provide several sets of rules/sources
	- useful if some rules are heavy to read, such as converting from another format
	- the idea is then to avoid recomputing these rules because another unrelated source of rules has changed
	- can also be leveraged in case of sub-repo to separate reading different repos
? provide a mechansim to prevent writing non-targets
	- mount an overlay over the repo
	- at the end, transport targets to their real location
	- drop other written files
	- generate an error or not if any such files, depending on user declaration
? support direct rebuild of deps
	- specify a target flag 'direct' for use by pattern
	- specify a dep    flag 'direct' for dynamic use (through ldepend)
	- pass known hidden deps to job_exec to avoid connection to server when known
	- the difficult point : manage resource deadlocks
		- suspend waiting job (tell backend job is suspended)
		- tell backend job is resumed
		- while suspended, consider resources to be freed
		- send a signal to job such as 28 (SIGWINCH) which is normally ignored so it can free expensive resources such as licences
		- then resume participates to allocation competition
? provide more options to stderr management :
	- redirect to stdout
	- hide it (still accessible in lshow -e)
	? rename allow_stderr to stderr
? provide only visibility to system+repo+tmp to jobs
	- how to identify system ?
? allow dynamic attribute functions to have inherited values (passing inherited value as argument)
	- maybe not strictly necessary, but this is what is done for cmd
? implement a compilation rule py->pyc
	- and use python -B
	- what about the numerous retries this approach implies ?
		- this is a use case for direct dep update
		! beware that pyc records py date
			- then pyc would be broken if py is updated steady as pyc would not be remade
			- requires a dep flag to say we are depending on date
			? or use the python crc based mechanism
? provide a lock mechanism in local backend
	? much like a bunch of resources w/ capacity=1
	? stored as a set
? implement prelude
	- this is a kind of artificial submit_cmd_attrs
		- does not exist yet but straightforward to implement after  submit_rsrcs_attrs
		! except that write to target is allowed
	? for very short rules (.pyc, opts, ...), put script in prelude instead of cmd
	- generally speaking, prelude can avoid rerun as they are executed during analysis
? find a way for local resources to be anything
	? int/float/str/bool/None/... or list/tuple/set/dict thereof
? add a new autodep mechanism based on syscall user dispatch
	? cf man 2 prctl, PR_SET_SYSCALL_USER_DISPATCH
	? seems to be highly architecture dependent, is it worth ?
M implement fuse as an autodep method
	- does not seem doable because read foo/bar first does a lookup(foo)
M port to Darwin
	- autodep requires the use of dtrace as there is no way to piggyback calls to libc
	- dtrace requires admin privileges which obliges job_exec and the like to be suid root
	- dtrace is *very* different from ptrace, an entirely new code
	- Darwin support makes code less readable because of numerous #if's
	- no traction

****************************************************************************************************
* OPTIMIZATIONS
****************************************************************************************************

! avoid ack at job start
	- pass all infos in command line
		- pass JobRpcReply as argument through mk_shell_str
		- fall back to current implementation if command line would be too large
	- find a way to be certain that seq_id is not necessary to qualify job start
	- difficult to work out : acquire_cmd_line would call _handle_job_start which needs to record pid which we do not have yet
	- saves about 1% on benchmark (10000)
! prepare namespace while waiting for server if possible
	- i.e. when tmp size info is static
	- move views to submit_cmd_attrs
	- share views in submit_attrs as there is very few variability
! no req_info for non-buildable nodes
! find a way to serialize global dict
	- like marshal, with functions
? evaluate dynamic deps only if static deps match
	- at least for those deps placed before
	- is it worth ?
? trap close in autodep
	- so as to know when a dep was last accessed
	- and avoid too many overwrites
	- must be very careful, e.g. mmap can access file after close, dup'ed file descriptors can be created, etc.
? put all python expressions for a single phase in the same expression
	- DepsAttrs
	- SubmitRsrcsAttrs + SubmitAncillaryAttrs
	- StartCmdAttrs + Cmd + StartRsrcsAttrs + StartAncillaryAttrs
? launch deps as soon as they are discovered
	- w/o waiting for depending job to complete
	- for non-phony non-existent deps, else there is a risk that a steady target is modified while job is on going
		- or record close & dup so as to know when a file is no longer needed
		- gather crc before dep launch in case dep is steady
	- possibly upon declaration by user
? set an access cache in autodep
	? put only static info
	? mark target dirs & tmp as beginning of writable area -> do not cache within
	? cache accesses as long as we are not in the writable area
		? maintain table file -> Dir/Lnk(value)/FileOrNone
? replace db_date() with an index into a table
	? put db_date() in ReqInfo, which is somewhat delicate
		? or invent a new temporary struct which is not indexed by req
	? capture table at start of req with existing reqs
	? just replace in Src, a direct copy of file date by a search in this table
	? replace check with a comparison on index
	? rest of code is identical
? improve rule updating
	? when matching changes but command does not change, avoid to relaunch job
	? compute cmd checksum on its code rather than on the source to resist to cosmetic changes such as comments modifs
X manage HUGE pages in store
	- requires privileges

****************************************************************************************************
* DOC
****************************************************************************************************

? add hard limits
	- rules, targets, deps, rscrs, nodes, jobs...

****************************************************************************************************
* TESTS
****************************************************************************************************

! add a unit_test to validate max_retries_on_lost
! idx overflow
	- check with 8-bits indexes
! test crash recovery
	- including atomicity of store
? add a UT for scp

****************************************************************************************************
* TOOLS
****************************************************************************************************

! develop lmake under lmake
	- autodep must support to be audited by autodep for unit tests
	- provide a bootstrap script
? consider serialization libs :
	- https://github.com/alibaba/yalantinglibs
		- https://alibaba.github.io/yalantinglibs/resource/A%20Faster%20Serialization%20Library%20Based%20on%20Compile-time%20Reflection%20and%20C++%2020.pdf
? implement a file dump
	- put a header in files so that format can be automatically recognized
	- suitable for use in vim
? make a navigation tool based on Neo4J or a similarly complete tool
? consider gdb guis :
	- apt install nemiver
	- insight
